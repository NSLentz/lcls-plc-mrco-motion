<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="Main" Id="{3f08c9da-acd6-4059-bcf8-867945acb3ea}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM Main
VAR
    // Motors
    // MRCO Axes
    {attribute 'TcLinkTo' := '.bLimitForwardEnable:=TIIB[GasNozzleX-EL7047]^STM Status^Status^Digital input 1;
                              .bLimitBackwardEnable:=TIIB[GasNozzleX-EL7047]^STM Status^Status^Digital input 2';
                              .nRawEncoderULINT     := TIIB[Enc_GasNozzleX_Y-EL5042]^FB Inputs Channel 1^Position'}
    {attribute 'pytmc' := '
        pv: TMO:MRCO:MMS:01
    '}
    M1 : ST_MotionStage; // Gas Nozzle X

    {attribute 'TcLinkTo' := '.bLimitForwardEnable:=TIIB[GasNozzleY-EL7047]^STM Status^Status^Digital input 2;
                              .bLimitBackwardEnable:=TIIB[GasNozzleY-EL7047]^STM Status^Status^Digital input 1';
                              .nRawEncoderULINT     := TIIB[Enc_GasNozzleX_Y-EL5042]^FB Inputs Channel 2^Position'}
    {attribute 'pytmc' := '
        pv: TMO:MRCO:MMS:02
    '}
    M2 : ST_MotionStage; // Gas Nozzle Y

    {attribute 'TcLinkTo' := '.bLimitForwardEnable:=TIIB[GasNozzleZ-EL7047]^STM Status^Status^Digital input 2;
                              .bLimitBackwardEnable:=TIIB[GasNozzleZ-EL7047]^STM Status^Status^Digital input 1';
                              .nRawEncoderULINT     := TIIB[Enc_GasNozzleZ_SamplePaddleX-EL5042]^FB Inputs Channel 1^Position'}
    {attribute 'pytmc' := '
        pv: TMO:MRCO:MMS:03
    '}
    M3 : ST_MotionStage; // Gas Nozzle Z

    {attribute 'TcLinkTo' := '.bLimitForwardEnable:=TIIB[SamplePaddleX-EL7047]^STM Status^Status^Digital input 2;
                              .bLimitBackwardEnable:=TIIB[SamplePaddleX-EL7047]^STM Status^Status^Digital input 1';
                              .nRawEncoderULINT     := TIIB[Enc_GasNozzleZ_SamplePaddleX-EL5042]^FB Inputs Channel 2^Position'}
    {attribute 'pytmc' := '
        pv: TMO:MRCO:MMS:04
    '}
    M4 : ST_MotionStage; // Sample Paddle X Stage Coordinates

    {attribute 'TcLinkTo' := '.bLimitForwardEnable:=TIIB[SamplePaddleY-EL7047]^STM Status^Status^Digital input 1;
                              .bLimitBackwardEnable:=TIIB[SamplePaddleY-EL7047]^STM Status^Status^Digital input 2';
                              .nRawEncoderULINT     := TIIB[Enc_SamplePaddleY_Z-EL5042]^FB Inputs Channel 1^Position'}
    {attribute 'pytmc' := '
        pv: TMO:MRCO:MMS:05
    '}
    M5 : ST_MotionStage; // Sample Paddle Y Stage Coordinates

    {attribute 'TcLinkTo' := '.bLimitForwardEnable:=TIIB[SamplePaddleZ-EL7047]^STM Status^Status^Digital input 1;
                              .bLimitBackwardEnable:=TIIB[SamplePaddleZ-EL7047]^STM Status^Status^Digital input 2';
                              .nRawEncoderULINT     := TIIB[Enc_SamplePaddleY_Z-EL5042]^FB Inputs Channel 2^Position'}
    {attribute 'pytmc' := '
        pv: TMO:MRCO:MMS:06
    '}
    M6 : ST_MotionStage; // Sample Paddle Z Stage Coordinates

    {attribute 'pytmc' := '
        pv: TMO:MRCO:MMS:V4
    '}
    M7 : ST_MotionStage; // Sample Paddle X Beam Coordinates (Virtual Axis)
    {attribute 'pytmc' := '
        pv: TMO:MRCO:MMS:V5
    '}
    M8 : ST_MotionStage; // Sample Paddle Y Beam Coordinates (Virtual Axis)
    {attribute 'pytmc' := '
        pv: TMO:MRCO:MMS:V6
    '}
    M9 : ST_MotionStage; // Sample Paddle Z Beam Coordinates (Virtual Axis)

    // MRCO Axes
    fbMotionStageM1 : FB_MotionStage;
    fbMotionStageM2 : FB_MotionStage;
    fbMotionStageM3 : FB_MotionStage;
    fbMotionStageM4 : FB_MotionStage;
    fbMotionStageM5 : FB_MotionStage;
    fbMotionStageM6 : FB_MotionStage;
    fbMotionStageM7 : FB_MotionStage; // Virtual
    fbMotionStageM8 : FB_MotionStage; // Virtual
    fbMotionStageM9 : FB_MotionStage; // Virtual

    bInit : BOOL := TRUE;

    nVirtualEncoderUnitConversion: LREAL := 1000000; // mm to nm
    {attribute 'TcLinkTo' := 'TINC^NC-Task 1 SAF^Axes^SamplyPaddleVX^Enc^Inputs^In^nDataIn1'}
    nVirtualEncoderM7nm AT %Q*: UDINT; // Virtual Encoder to map to NC axis encoder data input. In 1 nm/count
    {attribute 'TcLinkTo' := 'TINC^NC-Task 1 SAF^Axes^SamplePaddleVY^Enc^Inputs^In^nDataIn1'}
    nVirtualEncoderM8nm AT %Q*: UDINT; // Virtual Encoder to map to NC axis encoder data input. In 1 nm/count
    {attribute 'TcLinkTo' := 'TINC^NC-Task 1 SAF^Axes^SamplePaddleVZ^Enc^Inputs^In^nDataIn1'}
    nVirtualEncoderM9nm AT %Q*: UDINT; // Virtual Encoder to map to NC axis encoder data input. In 1 nm/count

    {attribute 'pytmc' := '
        pv: TMO:MRCO:SP:bVirtualAxesActive
    '}
    bVirtualAxesActive: BOOL;

    {attribute 'pytmc' := '
        pv: TMO:MRCO:SP:PTransform3D
    '}
    stPMotionTransform3D: ST_MotionTransform3D;

    {attribute 'pytmc' := '
        pv: TMO:MRCO:SP:VTransform3D
    '}
    stVMotionTransform3D: ST_MotionTransform3D;

    {attribute 'pytmc' := '
        pv: TMO:MRCO:SP:ATransform3D
    '}
    stAMotionTransform3D: ST_MotionTransform3D;

    fDPosM7: LREAL;
    fDPosM8: LREAL;
    fDPosM9: LREAL;

    rtM7Execute: R_TRIG;
    rtM8Execute: R_TRIG;
    rtM9Execute: R_TRIG;

    fbMotionVirtualFrame : FB_MotionVirtualFrame;
    bBaseToNew : BOOL;
    sOrder : STRING := 'XYZ';
END_VAR
VAR PERSISTENT
    {attribute 'pytmc' := '
        pv: TMO:MRCO:SP:Alpha
        io: io
        field: DESC The acute angle (in deg) between the x axis in stage coordinates and the x axis in beam coordinates.
    '}
    aDeg: LREAL := -22.21; // The angle between stMotionStage1 and the new axis 1. In Degrees.
    {attribute 'pytmc' := '
        pv: TMO:MRCO:SP:Beta
        io: io
        field: DESC The acute angle (in deg) between the y axis in stage coordinates and the y axis in beam coordinates.
    '}
    bDeg:  LREAL := -20.7; // The angle between stMotionStage2 and the new axis 2. In Degrees.
    {attribute 'pytmc' := '
        pv: TMO:MRCO:SP:Gamma
        io: io
        field: DESC The acute angle (in deg) between the z axis in stage coordinates and the z axis in beam coordinates.
    '}
    gDeg: LREAL := 3.793; // The angle between stMotionStage3 and the new axis 3. In Degrees.
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
IF bInit THEN
    bInit := FALSE;

    M1.bHardwareEnable := TRUE;
    M1.bPowerSelf := TRUE;
    M1.nBrakeMode := E_StageBrakeMode.NO_BRAKE;
    M1.nEnableMode := E_StageEnableMode.DURING_MOTION;

    M2.bHardwareEnable := TRUE;
    M2.bPowerSelf := TRUE;
    M2.nBrakeMode := E_StageBrakeMode.NO_BRAKE;
    M2.nEnableMode := E_StageEnableMode.DURING_MOTION;

    M3.bHardwareEnable := TRUE;
    M3.bPowerSelf := TRUE;
    M3.nBrakeMode := E_StageBrakeMode.NO_BRAKE;
    M3.nEnableMode := E_StageEnableMode.DURING_MOTION;

    M4.bHardwareEnable := TRUE;
    M4.bPowerSelf := TRUE;
    M4.nBrakeMode := E_StageBrakeMode.NO_BRAKE;
    M4.nEnableMode := E_StageEnableMode.DURING_MOTION;
    M4.fVelocity := 0.1;

    M5.bHardwareEnable := TRUE;
    M5.bPowerSelf := TRUE;
    M5.nBrakeMode := E_StageBrakeMode.NO_BRAKE;
    M5.nEnableMode := E_StageEnableMode.DURING_MOTION;
    M5.fVelocity := 0.1;

    M6.bHardwareEnable := TRUE;
    M6.bPowerSelf := TRUE;
    M6.nBrakeMode := E_StageBrakeMode.NO_BRAKE;
    M6.nEnableMode := E_StageEnableMode.DURING_MOTION;
    M6.fVelocity := 0.1;

    M7.bHardwareEnable := TRUE;
    M7.bPowerSelf := TRUE;
    M7.bLimitBackwardEnable := TRUE;
    M7.bLimitForwardEnable := TRUE;
    M7.nBrakeMode := E_StageBrakeMode.NO_BRAKE;
    M7.nEnableMode := E_StageEnableMode.DURING_MOTION;
    M7.fVelocity := 0.1;

    M8.bHardwareEnable := TRUE;
    M8.bPowerSelf := TRUE;
    M8.bLimitBackwardEnable := TRUE;
    M8.bLimitForwardEnable := TRUE;
    M8.nBrakeMode := E_StageBrakeMode.NO_BRAKE;
    M8.nEnableMode := E_StageEnableMode.DURING_MOTION;
    M8.fVelocity := 0.1;

    M9.bHardwareEnable := TRUE;
    M9.bPowerSelf := TRUE;
    M9.bLimitBackwardEnable := TRUE;
    M9.bLimitForwardEnable := TRUE;
    M9.nBrakeMode := E_StageBrakeMode.NO_BRAKE;
    M9.nEnableMode := E_StageEnableMode.DURING_MOTION;
    M9.fVelocity := 0.1;

    bVirtualAxesActive := FALSE;
END_IF

// MRCO
fbMotionVirtualFrame(
    stMotionStageRx := M4,
    stMotionStageRy := M5,
    stMotionStageRz := M6,
    stMotionStageVx := M7,
    stMotionStageVy := M8,
    stMotionStageVz := M9,
    bEnable := bVirtualAxesActive,
    fAlphaDegrees := aDeg,
    fBetaDegrees := bDeg,
    fGammaDegrees := gDeg,
    sOrder := sOrder,
    bBaseToNew := bBaseToNew,
    fbVirtActPositionVec3 =>,
    fbVirtActVelocityVec3 =>,
    fbVirtActAcceleraVec3 =>,
    fbRealTarPositionVec3 =>,
    fbRealTarVelocityVec3 =>,
    fbRealTarAcceleraVec3 =>
);

nVirtualEncoderM7nm := LREAL_TO_UDINT((fbMotionVirtualFrame.fbVirtActPositionVec3.x + 200.0) * nVirtualEncoderUnitConversion);
nVirtualEncoderM8nm := LREAL_TO_UDINT((fbMotionVirtualFrame.fbVirtActPositionVec3.y + 200.0) * nVirtualEncoderUnitConversion);
nVirtualEncoderM9nm := LREAL_TO_UDINT((fbMotionVirtualFrame.fbVirtActPositionVec3.z + 200.0) * nVirtualEncoderUnitConversion);

stPMotionTransform3D := F_UpdateMotionTransform3d(
    fAlphaDegrees := aDeg,
    fBetaDegrees  := bDeg,
    fGammaDegrees := gDeg,
    fbVirtActVec3 := fbMotionVirtualFrame.fbVirtActPositionVec3,
    fbVirtTarVec3 := fbMotionVirtualFrame.fbVirtTarPositionVec3,
    fbRealActVec3 := fbMotionVirtualFrame.fbRealActPositionVec3,
    fbRealTarVec3 := fbMotionVirtualFrame.fbRealTarPositionVec3
);

stVMotionTransform3D := F_UpdateMotionTransform3d(
    fAlphaDegrees := aDeg,
    fBetaDegrees  := bDeg,
    fGammaDegrees := gDeg,
    fbVirtActVec3 := fbMotionVirtualFrame.fbVirtActVelocityVec3,
    fbVirtTarVec3 := fbMotionVirtualFrame.fbVirtTarVelocityVec3,
    fbRealActVec3 := fbMotionVirtualFrame.fbRealActVelocityVec3,
    fbRealTarVec3 := fbMotionVirtualFrame.fbRealTarVelocityVec3
);

stAMotionTransform3D := F_UpdateMotionTransform3d(
    fAlphaDegrees := aDeg,
    fBetaDegrees  := bDeg,
    fGammaDegrees := gDeg,
    fbVirtActVec3 := fbMotionVirtualFrame.fbVirtActAcceleraVec3,
    fbVirtTarVec3 := fbMotionVirtualFrame.fbVirtTarAcceleraVec3,
    fbRealActVec3 := fbMotionVirtualFrame.fbRealActAcceleraVec3,
    fbRealTarVec3 := fbMotionVirtualFrame.fbRealTarAcceleraVec3
);

// Process FB_MotionStage for each axis.

// Gas Nozzle
fbMotionStageM1(stMotionStage:=M1);
fbMotionStageM2(stMotionStage:=M2);
fbMotionStageM3(stMotionStage:=M3);

// Sample Paddle
fbMotionStageM4(stMotionStage:=M4);
fbMotionStageM5(stMotionStage:=M5);
fbMotionStageM6(stMotionStage:=M6);

// Sample Paddle (Virtual)
fbMotionStageM7(stMotionStage:=M7);
fbMotionStageM8(stMotionStage:=M8);
fbMotionStageM9(stMotionStage:=M9);
    ]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>