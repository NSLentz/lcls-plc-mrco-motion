<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="Main" Id="{3f08c9da-acd6-4059-bcf8-867945acb3ea}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM Main
VAR
    // Motors
    // MRCO Axes
    {attribute 'TcLinkTo' := '.bLimitForwardEnable:=TIIB[GasNozzleX-EL7047]^STM Status^Status^Digital input 1;
                              .bLimitBackwardEnable:=TIIB[GasNozzleX-EL7047]^STM Status^Status^Digital input 2';
                              .nRawEncoderULINT     := TIIB[Enc_GasNozzleX_Y-EL5042]^FB Inputs Channel 1^Position'}
    {attribute 'pytmc' := '
        pv: TMO:MRCO:MMS:01
    '}
    M1 : ST_MotionStage; // Gas Nozzle X

    {attribute 'TcLinkTo' := '.bLimitForwardEnable:=TIIB[GasNozzleY-EL7047]^STM Status^Status^Digital input 2;
                              .bLimitBackwardEnable:=TIIB[GasNozzleY-EL7047]^STM Status^Status^Digital input 1';
                              .nRawEncoderULINT     := TIIB[Enc_GasNozzleX_Y-EL5042]^FB Inputs Channel 2^Position'}
    {attribute 'pytmc' := '
        pv: TMO:MRCO:MMS:02
    '}
    M2 : ST_MotionStage; // Gas Nozzle Y

    {attribute 'TcLinkTo' := '.bLimitForwardEnable:=TIIB[GasNozzleZ-EL7047]^STM Status^Status^Digital input 2;
                              .bLimitBackwardEnable:=TIIB[GasNozzleZ-EL7047]^STM Status^Status^Digital input 1';
                              .nRawEncoderULINT     := TIIB[Enc_GasNozzleZ_SamplePaddleX-EL5042]^FB Inputs Channel 1^Position'}
    {attribute 'pytmc' := '
        pv: TMO:MRCO:MMS:03
    '}
    M3 : ST_MotionStage; // Gas Nozzle Z

    {attribute 'TcLinkTo' := '.bLimitForwardEnable:=TIIB[SamplePaddleX-EL7047]^STM Status^Status^Digital input 2;
                              .bLimitBackwardEnable:=TIIB[SamplePaddleX-EL7047]^STM Status^Status^Digital input 1';
                              .nRawEncoderULINT     := TIIB[Enc_GasNozzleZ_SamplePaddleX-EL5042]^FB Inputs Channel 2^Position'}
    {attribute 'pytmc' := '
        pv: TMO:MRCO:MMS:04
    '}
    M4 : ST_MotionStage; // Sample Paddle X Stage Coordinates

    {attribute 'TcLinkTo' := '.bLimitForwardEnable:=TIIB[SamplePaddleY-EL7047]^STM Status^Status^Digital input 1;
                              .bLimitBackwardEnable:=TIIB[SamplePaddleY-EL7047]^STM Status^Status^Digital input 2';
                              .nRawEncoderULINT     := TIIB[Enc_SamplePaddleY_Z-EL5042]^FB Inputs Channel 1^Position'}
    {attribute 'pytmc' := '
        pv: TMO:MRCO:MMS:05
    '}
    M5 : ST_MotionStage; // Sample Paddle Y Stage Coordinates

    {attribute 'TcLinkTo' := '.bLimitForwardEnable:=TIIB[SamplePaddleZ-EL7047]^STM Status^Status^Digital input 1;
                              .bLimitBackwardEnable:=TIIB[SamplePaddleZ-EL7047]^STM Status^Status^Digital input 2';
                              .nRawEncoderULINT     := TIIB[Enc_SamplePaddleY_Z-EL5042]^FB Inputs Channel 2^Position'}
    {attribute 'pytmc' := '
        pv: TMO:MRCO:MMS:06
    '}
    M6 : ST_MotionStage; // Sample Paddle Z Stage Coordinates

    {attribute 'pytmc' := '
        pv: TMO:MRCO:MMS:V4
    '}
    M7 : ST_MotionStage; // Sample Paddle X Beam Coordinates (Virtual Axis)
    {attribute 'pytmc' := '
        pv: TMO:MRCO:MMS:V5
    '}
    M8 : ST_MotionStage; // Sample Paddle Y Beam Coordinates (Virtual Axis)
    {attribute 'pytmc' := '
        pv: TMO:MRCO:MMS:V6
    '}
    M9 : ST_MotionStage; // Sample Paddle Z Beam Coordinates (Virtual Axis)

    // MRCO Axes
    fbMotionStageM1 : FB_MotionStage;
    fbMotionStageM2 : FB_MotionStage;
    fbMotionStageM3 : FB_MotionStage;
    fbMotionStageM4 : FB_MotionStage;
    fbMotionStageM5 : FB_MotionStage;
    fbMotionStageM6 : FB_MotionStage;
    fbMotionStageM7 : FB_MotionStage; // Virtual
    fbMotionStageM8 : FB_MotionStage; // Virtual
    fbMotionStageM9 : FB_MotionStage; // Virtual

    bInit : BOOL := TRUE;

    nVirtualEncoderUnitConversion: LREAL := 1000000; // mm to nm
    {attribute 'TcLinkTo' := 'TINC^NC-Task 1 SAF^Axes^SamplyPaddleVX^Enc^Inputs^In^nDataIn1'}
    nVirtualEncoderM7nm AT %Q*: UDINT; // Virtual Encoder to map to NC axis encoder data input. In 1 nm/count
    {attribute 'TcLinkTo' := 'TINC^NC-Task 1 SAF^Axes^SamplePaddleVY^Enc^Inputs^In^nDataIn1'}
    nVirtualEncoderM8nm AT %Q*: UDINT; // Virtual Encoder to map to NC axis encoder data input. In 1 nm/count
    {attribute 'TcLinkTo' := 'TINC^NC-Task 1 SAF^Axes^SamplePaddleVZ^Enc^Inputs^In^nDataIn1'}
    nVirtualEncoderM9nm AT %Q*: UDINT; // Virtual Encoder to map to NC axis encoder data input. In 1 nm/count

    {attribute 'pytmc' := '
        pv: TMO:MRCO:SP:bVirtualAxesActive
    '}
    bVirtualAxesActive: BOOL;

    {attribute 'pytmc' := '
        pv: TMO:MRCO:SP:PTransform3D
    '}
    stPMotionTransform3D: ST_MotionTransform3D;
    fbPMotionTransform3D: FB_MotionTransform3D;

    {attribute 'pytmc' := '
        pv: TMO:MRCO:SP:VTransform3D
    '}
    stVMotionTransform3D: ST_MotionTransform3D;
    fbVMotionTransform3D: FB_MotionTransform3D;

    fDPosM7: LREAL;
    fDPosM8: LREAL;
    fDPosM9: LREAL;

    rtM7Execute: R_TRIG;
    rtM8Execute: R_TRIG;
    rtM9Execute: R_TRIG;

    fbMotionStageTransform3D : FB_MotionStageTransform3D;
END_VAR
VAR PERSISTENT
    {attribute 'pytmc' := '
        pv: TMO:MRCO:SP:Alpha
        io: io
        field: DESC The acute angle (in deg) between the x axis in stage coordinates and the x axis in beam coordinates.
    '}
    aDeg: LREAL := -22.21; // The angle between stMotionStage1 and the new axis 1. In Degrees.
    {attribute 'pytmc' := '
        pv: TMO:MRCO:SP:Beta
        io: io
        field: DESC The acute angle (in deg) between the y axis in stage coordinates and the y axis in beam coordinates.
    '}
    bDeg:  LREAL := -20.7; // The angle between stMotionStage2 and the new axis 2. In Degrees.
    {attribute 'pytmc' := '
        pv: TMO:MRCO:SP:Gamma
        io: io
        field: DESC The acute angle (in deg) between the z axis in stage coordinates and the z axis in beam coordinates.
    '}
    gDeg: LREAL := 3.793; // The angle between stMotionStage3 and the new axis 3. In Degrees.
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
IF bInit THEN
    bInit := FALSE;

    M1.bHardwareEnable := TRUE;
    M1.bPowerSelf := TRUE;
    M1.nBrakeMode := E_StageBrakeMode.NO_BRAKE;
    M1.nEnableMode := E_StageEnableMode.DURING_MOTION;

    M2.bHardwareEnable := TRUE;
    M2.bPowerSelf := TRUE;
    M2.nBrakeMode := E_StageBrakeMode.NO_BRAKE;
    M2.nEnableMode := E_StageEnableMode.DURING_MOTION;

    M3.bHardwareEnable := TRUE;
    M3.bPowerSelf := TRUE;
    M3.nBrakeMode := E_StageBrakeMode.NO_BRAKE;
    M3.nEnableMode := E_StageEnableMode.DURING_MOTION;

    M4.bHardwareEnable := TRUE;
    M4.bPowerSelf := TRUE;
    M4.nBrakeMode := E_StageBrakeMode.NO_BRAKE;
    M4.nEnableMode := E_StageEnableMode.DURING_MOTION;
    M4.fVelocity := 0.1;

    M5.bHardwareEnable := TRUE;
    M5.bPowerSelf := TRUE;
    M5.nBrakeMode := E_StageBrakeMode.NO_BRAKE;
    M5.nEnableMode := E_StageEnableMode.DURING_MOTION;
    M5.fVelocity := 0.1;

    M6.bHardwareEnable := TRUE;
    M6.bPowerSelf := TRUE;
    M6.nBrakeMode := E_StageBrakeMode.NO_BRAKE;
    M6.nEnableMode := E_StageEnableMode.DURING_MOTION;
    M6.fVelocity := 0.1;

    M7.bHardwareEnable := TRUE;
    M7.bPowerSelf := TRUE;
    M7.bLimitBackwardEnable := TRUE;
    M7.bLimitForwardEnable := TRUE;
    M7.nBrakeMode := E_StageBrakeMode.NO_BRAKE;
    M7.nEnableMode := E_StageEnableMode.DURING_MOTION;
    M7.fVelocity := 0.1;

    M8.bHardwareEnable := TRUE;
    M8.bPowerSelf := TRUE;
    M8.bLimitBackwardEnable := TRUE;
    M8.bLimitForwardEnable := TRUE;
    M8.nBrakeMode := E_StageBrakeMode.NO_BRAKE;
    M8.nEnableMode := E_StageEnableMode.DURING_MOTION;
    M8.fVelocity := 0.1;

    M9.bHardwareEnable := TRUE;
    M9.bPowerSelf := TRUE;
    M9.bLimitBackwardEnable := TRUE;
    M9.bLimitForwardEnable := TRUE;
    M9.nBrakeMode := E_StageBrakeMode.NO_BRAKE;
    M9.nEnableMode := E_StageEnableMode.DURING_MOTION;
    M9.fVelocity := 0.1;

    bVirtualAxesActive := FALSE;
END_IF

// MRCO
fbMotionStageTransform3D(
    stMotionTransformPosition3D := stPMotionTransform3D,
    stMotionTransformVelocity3D := stVMotionTransform3D,
    stMotionStageRealFirstRotation := M6,
    stMotionStageRealSecondRotation := M5,
    stMotionStageRealThirdRotation := M4,
    stMotionStageVirtFirstRotation := M9,
    stMotionStageVirtSecondRotation := M8,
    stMotionStageVirtThirdRotation := M7,
    bVirtualAxesActive := bVirtualAxesActive,
    nVirtualEncoderUnitConversion := nVirtualEncoderUnitConversion,
    firstRotationAngle := aDeg,
    secondRotationAngle := bDeg,
    thirdRotationAngle := gDeg,
    nVirtualEncoderMotionStageVirtFirstRotationnm => nVirtualEncoderM9nm,
    nVirtualEncoderMotionStageVirtSecondRotationnm => nVirtualEncoderM8nm,
    nVirtualEncoderMotionStageVirtThirdRotationnm => nVirtualEncoderM7nm
);

(*
// Set the degree offsets for the coordinate transform from stage coordinates to beam coordinates.
stPMotionTransform3D.fADeg := aDeg;
stPMotionTransform3D.fBDeg := bDeg;
stPMotionTransform3D.fGDeg := gDeg;
stVMotionTransform3D.fADeg := aDeg;
stVMotionTransform3D.fBDeg := bDeg;
stVMotionTransform3D.fGDeg := gDeg;

// Set the actual measured position and velocity for each axis to support the coordinate transform.
stPMotionTransform3D.fMotorXMeas := M4.Axis.NcToPlc.ActPos;
stPMotionTransform3D.fMotorYMeas := M5.Axis.NcToPlc.ActPos;
stPMotionTransform3D.fMotorZMeas := M6.Axis.NcToPlc.ActPos;
stVMotionTransform3D.fMotorXMeas := M4.Axis.NcToPlc.ActVelo;
stVMotionTransform3D.fMotorYMeas := M5.Axis.NcToPlc.ActVelo;
stVMotionTransform3D.fMotorZMeas := M6.Axis.NcToPlc.ActVelo;

// Set the desired position in beam coordinates for each axis to support the coordinate transform.
rtM7Execute(CLK:=M7.bExecute);
rtM8Execute(CLK:=M8.bExecute);
rtM9Execute(CLK:=M9.bExecute);
IF rtM7Execute.Q THEN
    stPMotionTransform3D.fXSP := M7.fPosition;
    stVMotionTransform3D.fXSP := M7.fVelocity;
ELSIF rtM8Execute.Q OR rtM9Execute.Q THEN
    stPMotionTransform3D.fXSP := M7.Axis.NcToPlc.ActPos;
    stVMotionTransform3D.fXSP := 0;
    M7.fPosition := M7.Axis.NcToPlc.ActPos;
    M7.fVelocity := 0;
END_IF
IF rtM8Execute.Q THEN
    stPMotionTransform3D.fYSP := M8.fPosition;
    stVMotionTransform3D.fYSP := M8.fVelocity;
ELSIF rtM7Execute.Q OR rtM9Execute.Q THEN
    stPMotionTransform3D.fYSP := M8.Axis.NcToPlc.ActPos;
    stVMotionTransform3D.fYSP := 0;
    M8.fPosition := M8.Axis.NcToPlc.ActPos;
    M8.fVelocity := 0;
END_IF
IF rtM9Execute.Q THEN
    stPMotionTransform3D.fZSP := M9.fPosition;
    stVMotionTransform3D.fYSP := M9.fVelocity;
ELSIF rtM7Execute.Q OR rtM8Execute.Q THEN
    stPMotionTransform3D.fZSP := M9.Axis.NcToPlc.ActPos;
    stVMotionTransform3D.fZSP := 0;
    M9.fPosition := M9.Axis.NcToPlc.ActPos;
    M9.fVelocity := 0;
END_IF

// Set the desired velocity in beam coordinates. First need to figure out which direction we are moving
// so that we can apply the correct sign (positive or negative) to the velocity values.
fDPosM7 := stPMotionTransform3D.fXSP - M7.Axis.NcToPlc.ActPos;
fDPosM8 := stPMotionTransform3D.fYSP - M8.Axis.NcToPlc.ActPos;
fDPosM9 := stPMotionTransform3D.fZSP - M9.Axis.NcToPlc.ActPos;

// Apply the correct sign to the velocity value so that the coordinate transform computes correctly.
IF fDPosM7 < 0 THEN
    stVMotionTransform3D.fXSP := stVMotionTransform3D.fXSP * -1;
END_IF
IF fDPosM8 < 0 THEN
    stVMotionTransform3D.fYSP := stVMotionTransform3D.fYSP * -1;
END_IF
IF fDPosM9 < 0 THEN
    stVMotionTransform3D.fZSP := stVMotionTransform3D.fZSP * -1;
END_IF

// Transform Coordinates to new coordinate system before calling fbMotion so that it knows where to move in stage coordinates to get to the desired beam coordinates.
fbPMotionTransform3D(
    stMotionTransform3D:=stPMotionTransform3D
);
fbVMotionTransform3D(
    stMotionTransform3D:=stVMotionTransform3D
);

// Get the converted measured position in beam coordinates and write it to the virtual encoder we have mapped to the NC axes.
nVirtualEncoderM7nm := LREAL_TO_UDINT(stPMotionTransform3D.fXMeas * nVirtualEncoderUnitConversion);
nVirtualEncoderM8nm := LREAL_TO_UDINT(stPMotionTransform3D.fYMeas * nVirtualEncoderUnitConversion);
nVirtualEncoderM9nm := LREAL_TO_UDINT(stPMotionTransform3D.fZMeas * nVirtualEncoderUnitConversion);

M7.nRawEncoderULINT := UDINT_TO_ULINT(nVirtualEncoderM7nm);
M8.nRawEncoderULINT := UDINT_TO_ULINT(nVirtualEncoderM8nm);
M9.nRawEncoderULINT := UDINT_TO_ULINT(nVirtualEncoderM9nm);

// If the virtual axes are enabled, then do the following logic. Allows the user to turn off the coordinate transform and
// run just controlling each individual motor which are in stage coordinates.
IF bVirtualAxesActive THEN
    // Get the result of the coordinate transform assigned as the setpoint position for each motor in stage coordinates.
    M4.fPosition := stPMotionTransform3D.fMotorXSP;
    M5.fPosition := stPMotionTransform3D.fMotorYSP;
    M6.fPosition := stPMotionTransform3D.fMotorZSP;

    // Get the result of the coordinate transform assigned as the setpoint velocity for each motor in stage coordinates.
    // Take the absolute value because the velocity value is in reality just a speed setting.
    M4.fVelocity := ABS(stVMotionTransform3D.fMotorXSP);
    M5.fVelocity := ABS(stVMotionTransform3D.fMotorYSP);
    M6.fVelocity := ABS(stVMotionTransform3D.fMotorZSP);

    // If any virtual axis was requested to move, we have to call bExecute on all the motors,
    // because any move in beam coordinates will likely require a move on all three motors.
    IF rtM7Execute.Q OR rtM8Execute.Q OR rtM9Execute.Q THEN
        M4.bMoveCmd := TRUE;
        M5.bMoveCmd := TRUE;
        M6.bMoveCmd := TRUE;
    END_IF

    // If any virtual axis detects an error, make sure to propagate the error status to the actual
    // axes.
    IF M7.bError OR M8.bError OR M9.bError THEN
        M4.bExecute := FALSE;
        M5.bExecute := FALSE;
        M6.bExecute := FALSE;
        M4.bError := TRUE;
        M5.bError := TRUE;
        M6.bError := TRUE;
        M4.sCustomErrorMessage := 'An error occured in Sample Paddle Virtual X, Y, or Z. Check Virtual X, Y, and Z.';
        M5.sCustomErrorMessage := 'An error occured in Sample Paddle Virtual X, Y, or Z, Check Virtual X, Y, and Z.';
        M6.sCustomErrorMessage := 'An error occured in Sample Paddle Virtual X, Y, or Z, Check Virtual X, Y, and Z.';
    END_IF

    // If any actual axis detects an error, make sure to propagate the error status to the virtual
    // axes.
    IF M4.bError OR M5.bError OR M6.bError THEN
        M7.bExecute := FALSE;
        M8.bExecute := FALSE;
        M9.bExecute := FALSE;
        M7.bError := TRUE;
        M8.bError := TRUE;
        M9.bError := TRUE;
        M7.sCustomErrorMessage := 'An error occured in Sample Paddle X, Y, or Z. Check X, Y, and Z.';
        M8.sCustomErrorMessage := 'An error occured in Sample Paddle X, Y, or Z, Check X, Y, and Z.';
        M9.sCustomErrorMessage := 'An error occured in Sample Paddle X, Y, or Z, Check X, Y, and Z.';
    END_IF
END_IF
*)

// Process FB_MotionStage for each axis.

// Gas Nozzle
fbMotionStageM1(stMotionStage:=M1);
fbMotionStageM2(stMotionStage:=M2);
fbMotionStageM3(stMotionStage:=M3);

// Sample Paddle
fbMotionStageM4(stMotionStage:=M4);
fbMotionStageM5(stMotionStage:=M5);
fbMotionStageM6(stMotionStage:=M6);

// Sample Paddle (Virtual)
fbMotionStageM7(stMotionStage:=M7);
fbMotionStageM8(stMotionStage:=M8);
fbMotionStageM9(stMotionStage:=M9);
    ]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>